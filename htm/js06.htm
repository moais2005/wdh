<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta name="Author" content="Юрий Лукач">
<meta name="Description" content="Справочник Веб-разработчика: современные технологии WWW">
<meta name="Keywords" content="WWW, Веб, разработка, программирование, HTML, DHTML, CSS, Java, JavaScript, CGI, PERL, ASP, XML, XSL, VML, VRML">
<title>WDH: JavaScript - Операторы и функции</title>
<link rel="Prev" href="js05.htm" title="Регулярные выражения">
<link rel="Next" href="js07.htm" title="Использование объектов">
<link rel="Copyright" href="cpyright.htm" title="Сведения об авторских правах">
<link rev="Made" href="mailto:yury@suncloud.ru" title="Обратная связь">
<script type="text/javascript" src="global/load.js"></script>
<script type="text/javascript" src="global/link.js"></script>
</head>

<body onLoad="initDoc(); addBanner(true)">
<table border="0" cellspacing="0" cellpadding="0" width="100%" style="margin: 0">
  <tr><td><div id="divHeader"></div></td></tr>
  <tr><td id="tdBanner" style="text-align: center"><script type="text/javascript">addBanner(false);</script></td></tr>
  <tr><td>

      <h2><a name="ref36">Глава 3.6. Операторы и функции</a></h2>

      <h3><a name="ref361">3.6.1. Операторы JavaScript</a></h3>

      <p>Управление последовательностью действий в ходе выполнения сценария осуществляется с помощью
        <em>операторов</em>. JavaScript содержит стандартный набор операторов, унаследованный от языков
        C++ и Java, а именно:</p>

      <ul>
        <li>условный оператор <a href="#ref362"><strong>if&#133;else</strong></a>;</li>
        <li>оператор выбора <a href="#ref363"><strong>switch</strong></a>;</li>
        <li>операторы цикла <a href="#ref3641"><strong>for</strong></a>, <a
    href="#ref3642"><strong>while</strong></a>, <a href="#ref3643"><strong>do&#133;while</strong></a>,
          <a href="#ref3645"><strong>break</strong></a> и <a href="#ref3646"><strong>continue</strong></a>;</li>
        <li>оператор итерации <a href="#ref365"><strong>for&#133;in</strong></a>;</li>
        <li>оператор указания объекта <a href="#ref366"><strong>with</strong></a>;</li>
        <li>операторы обработки исключений <a href="#ref3672"><strong>try&#133;catch</strong></a> и
          <a href="#ref3673"><strong>throw</strong></a>;</li>
        <li>операторы декларации функций <a href="#ref3681"><strong>function</strong></a> и возврата
          из функции <strong><a href="#ref3684">return</a></strong>.</li>
      </ul>

      <p>Следующие операторы описаны в других разделах справочника:</p>

      <ul>
        <li><a href="js02.htm#empty-stat">пустой оператор</a>;</li>
        <li>оператор декларации переменных <strong><a href="js02.htm#ref3251">var</a></strong>.</li>
      </ul>

      <p>Любое выражение JavaScript также является оператором.</p>

      <h3><a name="ref362">3.6.2. Условный оператор</a></h3>

      <p>Условный оператор <strong>if&#133;else</strong> позволяет проверить определенное условие и,
        в зависимости от его истинности, выполнить ту или иную последовательность операторов. Он имеет
        две формы:</p>

<pre class="syntax"><strong>if</strong> (<i>условие</i>) <i>оператор1</i>
<strong>if</strong> (<i>условие</i>) <i>оператор1</i> <strong>else</strong> <i>оператор2</i></pre>

      <p>Здесь <em>условие</em>&nbsp;&#151; это любое выражение, значение которого может быть преобразовано
        к логическому типу, <em>оператор1</em> и <em>оператор2</em>&nbsp;&#151; любые группы операторов
        JavaScript; если эти группы содержат более одного оператора, то они должны быть заключены в
        фигурные скобки <tt>{}</tt>.</p>

      <p>Первая форма оператора означает, что если значение <em>условия</em> истинно, то выполняются
        <em>операторы1</em>; если оно ложно, то управление передается оператору, следующему за <strong>if</strong>.</p>

      <p>Вторая форма оператора означает, что если значение <em>условия</em> истинно, то выполняются
        <em>операторы1</em>; если оно ложно, то выполняются <em>операторы2</em>.</p>

      <p>Пример использования условного оператора в теле функции, возвращающей наибольшее из трех чисел:</p>

      <div class="code">
<pre class="code">function maxValue(x, y, z) {
  if (x &gt;= y) {
    if (x &gt;= z)
      return x;
    else
      return z;
  }
  else {
    if (y &gt;= z)
      return y;
    else
      return z;
  }
}</pre>
      </div>

      <h3><a name="ref363">3.6.3. Оператор выбора</a></h3>

      <p>Оператор выбора <strong>switch</strong> выполняет ту или иную последовательность операторов
        в зависимости от значения определенного выражения. Он имеет вид:</p>

<pre class="syntax"><strong>switch</strong> (<i>выражение</i>) {
   <strong>case</strong> <i>значение</i>:
     <i>операторы</i>
     <strong>break</strong>;
   <strong>case</strong> <i>значение</i>:
    <i> операторы</i>
     <strong>break</strong>;
   ...
   <strong>default</strong>:
     <i>операторы</i>
}</pre>

      <p>Здесь <em>выражение</em>&nbsp;&#151; это любое выражение, <em>значение</em>&nbsp;&#151; это
        возможное значение выражения, а <em>операторы</em>&nbsp;&#151; любые группы операторов JavaScript.</p>

      <p>Оператор выбора сначала вычисляет значение <em>выражения</em>, а затем проверяет, нет ли этого
        значения в одной из меток <strong>case </strong><em>значение</em>. Если такая метка есть, то
        выполняются <em>операторы</em>, следующие за ней; если нет, то выполняются <em>операторы</em>,
        следующие за меткой <strong>default</strong> (если она отсутствует, то управление передается
        оператору, следующему за <strong>switch</strong>).</p>

      <p>Необязательный оператор <a href="#ref3645"><strong>break</strong></a> указывает, что после
        выполнения <em>операторов</em> управление передается оператору, следующему за <strong>switch</strong>.
        Если <strong>break</strong> отсутствует, то после выполнения <em>операторов</em> начинают выполняться
        <em>операторы</em>, стоящие после следующей метки <strong>case</strong> (управление как бы &quot;проваливается&quot;
        в следующую метку).</p>

      <p>В следующем примере значение переменной <tt>length</tt> преобразуется в метры в зависимости
        от начальной единицы измерений, заданной в переменной <tt>str</tt>. Обратите внимание, что после
        <tt>case &quot;м&quot;</tt> нет оператора <strong>break</strong>; в данном случае это означает,
        что эта метка и метка <strong>default</strong> обрабатываются одинаково, а именно значение
        переменной <tt>length</tt> не изменяется.</p>

      <div class="code">
<pre class="code">var str = &quot;см&quot;;
var length = 25;
switch (str) {
  case &quot;км&quot;:
    length *= 1000;
    break;
  case &quot;см&quot;:
    length /= 100;
    break;
  case &quot;м&quot;:
  default:
    break;
}</pre>
      </div>

      <h3><a name="ref364">3.6.4. Операторы цикла</a></h3>

      <p><em>Цикл</em>&nbsp;&#151; это последовательность операторов, выполнение которой повторяется
        до тех пор, пока определенное условие не станет ложным. JavaScript содержит три оператора цикла:
        <a
href="#ref3641"><strong>for</strong></a>, <a href="#ref3642"><strong>while</strong></a> и <a href="#ref3643"><strong>do&#133;while</strong></a>,
        а также операторы <a
href="#ref3645"><strong>break</strong></a> и <a href="#ref3646"><strong>continue</strong></a>, которые
        используются внутри циклов.</p>

      <p>Близок к операторам цикла и оператор итерации <a href="#ref365"><strong>for&#133;in</strong></a>,
        используемый при работе с объектами.</p>

      <h4><a name="ref3641">3.6.4.1. Оператор for</a></h4>

      <p>Оператор цикла <strong>for</strong> имеет вид:</p>

<pre class="syntax"><strong>for</strong> (<i>инициализация</i>; <em>условие</em>; <em>изменение</em>) <i>оператор</i></pre>

      <p>Здесь <em>инициализация</em>&nbsp;и <em>изменение</em> &#151; это любое выражения, <em>условие</em>&nbsp;&#151;
        любое выражение, значение которого может быть преобразовано к логическому типу, <em>оператор</em>
        &#151; любая группа операторов JavaScript; если эти группа содержит более одного оператора,
        то она должны быть заключена в фигурные скобки <tt>{}</tt>. <em>Инициализация</em> может содержать
        <a href="js02.htm#ref3251">декларацию переменной</a>.</p>

      <p>Оператор <strong>for </strong>выполняется следующим образом:</p>

      <ol>
        <li>Выполняется выражение <em>инициализация</em> (обычно это выражение инициализирует счетчик
          или счетчики цикла).</li>
        <li>Вычисляется значение выражения <em>условие</em>. Если оно ложно, то управление передается
          оператору, следующему за данным оператором.</li>
        <li>Выполняется <em>оператор</em>.</li>
        <li>Выполняется выражение <em>изменение</em> (обычно это выражение увеличивает или уменьшает
          счетчик или счетчики цикла) и управление передается этапу 2.</li>
      </ol>

      <p>Данный оператор обычно используется в тех случаях, когда количество повторений цикла известно
        заранее. Например, следующая функция обнуляет все элементы массива, переданного ей в качестве
        аргумента:</p>

      <div class="code">
<pre class="code">function initArray(a) {
  for (var i = 0; i &lt; a.length; i++)
    a[i] = 0;
}</pre>
      </div>

      <h4><a name="ref3642">3.6.4.2. Оператор while</a></h4>

      <p>Оператор цикла <strong>while</strong> имеет вид:</p>

<pre class="syntax"><strong>while</strong> (<em>условие</em>) <i>оператор</i></pre>

      <p>Здесь <em>условие</em>&nbsp;&#151; любое выражение, значение которого может быть преобразовано
        к логическому типу, <em>оператор</em> - любая группа операторов JavaScript; если эти группа
        содержит более одного оператора, то она должны быть заключена в фигурные скобки <tt>{}</tt>.</p>

      <p>Оператор <strong>while </strong>выполняется следующим образом:</p>

      <ol>
        <li>Вычисляется значение выражения <em>условие</em>. Если оно ложно, то управление передается
          оператору, следующему за данным оператором.</li>
        <li>Выполняется <em>оператор</em> и управление передается этапу 1.</li>
      </ol>

      <p>При использовании данного оператора необходимо убедиться, что рано или поздно <em>условие</em>
        станет ложным, т.&nbsp;к. иначе сценарий войдет в бесконечный цикл, например:</p>

      <div class="code">
<pre class="code">while (true)
  document.write(&quot;Привет всем!&quot;);</pre>
      </div>

      <h4><a name="ref3643">3.6.4.3. Оператор do&#133;while</a></h4>

      <p>Оператор цикла <strong>do&#133;while</strong> имеет вид:</p>

<pre class="syntax"><strong>do</strong> <i>оператор</i> <strong>while</strong> (<em>условие</em>)</pre>

      <p>Здесь <em>условие</em>&nbsp;&#151; любое выражение, значение которого может быть преобразовано
        к логическому типу, <em>оператор</em> - любая группа операторов JavaScript; если эти группа
        содержит более одного оператора, то она должны быть заключена в фигурные скобки <tt>{}</tt>.</p>

      <p>Оператор <strong>do &#133; while </strong>выполняется следующим образом:</p>

      <ol>
        <li>Выполняется <em>оператор</em>.</li>
        <li>Вычисляется значение выражения <em>условие</em>. Если оно ложно, то управление передается
          оператору, следующему за данным оператором.</li>
        <li>Управление передается этапу 1.</li>
      </ol>

      <p>Этот оператор отличается от оператора <a href="#ref3642"><strong>while</strong></a> тем, что
        цикл обязательно выполняется хотя бы раз. Пример:</p>

      <div class="code">
<pre class="code">var i = 0;
do
  document.write(i++);
while (i &lt; 10);</pre>
      </div>

      <h4><a name="ref3644">3.6.4.4. Метки операторов</a></h4>

      <p>Любой оператор или блок операторов в сценарии на языке JavaScript может иметь любое количество
        <em>меток</em>. Метки используются операторами <a href="#ref3645"><strong>break</strong></a>
        и <a href="#ref3646"><strong>continue</strong></a> для указания того, к какому оператору они
        относятся. Помеченный оператор имеет вид:</p>

<pre class="syntax"><em>метка</em>:
 <i>оператор</i></pre>

      <p>В качестве метки может использоваться любой идентификатор, который не является <a href="js02.htm#ref323">зарезервированным
        словом</a>.</p>

      <p>Хотя в современном программировании использование меток считается дурным тоном, в некоторых
        случаях их применение существенно упрощает логику программы. Чаще всего это происходит, когда
        метки используются для передачи управления из глубоко вложенного цикла к внешнему.</p>

      <h4><a name="ref3645">3.6.4.5. Оператор break</a></h4>

      <p>Оператор <strong>break</strong> прерывает выполнение текущего цикла, оператора <a href="#ref363"><strong>switch</strong></a>
        или помеченный оператора и передает управление оператору, следующему за прерванным. Этот оператор
        может употребляться только внутри циклов <a href="#ref3642"><strong>while</strong></a>, <a href="#ref3643"><strong>do&#133;while</strong></a>,
        <a href="#ref3641"><strong>for</strong></a> или <a href="#ref365"><strong>for&#133;in</strong></a>,
        а также внутри оператора <a href="#ref363"><strong>switch</strong></a>. Он имеет две формы:</p>

<pre class="syntax"><strong>break
break</strong> метка</pre>

      <p>Первая форма оператора прерывает выполнение самого внутреннего из циклов или операторов <a
href="#ref363"><strong>switch</strong></a>. Вторая форма оператора прерывает выполнение оператора с
        заданной меткой.</p>

      <p>Пример оператора <strong>break</strong> в теле функции, возвращающей номер элемента массива,
        содержащего заданное значение:</p>

      <div class="code">
<pre class="code">function findValue(a, theValue) {
  for (var i = 0; i &lt; a.length; i++) {
    if (a[i] == theValue)
      break;
  }
  return i;
}</pre>
      </div>

      <h4><a name="ref3646">3.6.4.6. Оператор continue</a></h4>

      <p>Оператор <strong>continue</strong> завершает текущую итерацию текущего цикла или цикла, помеченного
        соответствующей меткой, и начинает новую итерацию. Этот оператор может употребляться только
        внутри циклов <a href="#ref3642"><strong>while</strong></a>, <a
href="#ref3643"><strong>do&#133;while</strong></a>, <a href="#ref3641"><strong>for</strong></a> или
        <a href="#ref365"><strong>for&#133;in</strong></a>. Он имеет две формы:</p>

<pre class="syntax"><strong>continue
continue</strong> метка</pre>

      <p>Первая форма оператора завершает текущую итерацию самого внутреннего из циклов. Вторая форма
        оператора завершает текущую итерацию оператора с заданной меткой. При этом переход к следующей
        итерации цикла происходит следующим образом:</p>

      <ul>
        <li>циклы <a href="#ref3642"><strong>while</strong></a> и <strong><a href="#ref3643">do&#133;while</a></strong>
          проверяют условие цикла и, если оно истинно, начинают очередное выполнение цикла;</li>
        <li>цикл <a href="#ref3641"><strong>for</strong></a> выполняет выражение <em>изменение</em>,
          проверяет условие цикла и, если оно истинно, начинает очередное выполнение цикла;</li>
        <li>цикл <a href="#ref365"><strong>for&#133;in</strong></a> переходит к следующему полю переменной
          и начинает очередное выполнение цикла.</li>
      </ul>

      <p>В следующем примере к переменной <tt>n</tt> последовательно добавляются значения 1, 2, 4 и
        5:</p>

      <div class="code">
<pre class="code">var i = 0;
var n = 0;
while (i &lt; 5) {
  i++;
  if (i == 3)
    continue;
  n += i;
}</pre>
      </div>

      <h3><a name="ref365">3.6.5. Оператор for&#133;in</a></h3>

      <p>Оператор <strong>for&#133;in</strong> выполняет заданные действия для каждого свойства объекта
        или для каждого элемента массива. Он имеет вид:</p>

<pre class="syntax"><strong>for</strong> (<i>переменная</i> <strong>in</strong> <em>выражение</em>) <i>оператор</i></pre>

      <p>Здесь <em>переменная</em> &#151; это <a href="js02.htm#ref3251">декларация переменной</a>,
        <em>выражение</em>&nbsp;&#151; любое выражение, значением которого является объект или массив,
        <em>оператор</em> &#151; любая группа операторов JavaScript; если эти группа содержит более
        одного оператора, то она должны быть заключена в фигурные скобки <tt>{}</tt>.</p>

      <p>Оператор <strong>for&#133;in</strong> выполняется следующим образом:</p>

      <ol>
        <li><em>Переменной</em> присваивается имя очередного свойства объекта или очередного элемента
          массива (это зависит от того, является значением <em>выражения</em> объект или массив).</li>
        <li>Выполняется <em>оператор</em>.</li>
        <li>Управление передается этапу 1.</li>
      </ol>

      <p>При итерации массива переменной последовательно присваиваются значение первого, второго, ...,
        последнего элемента массива. Однако, при итерации свойств объекта невозможно предсказать, в
        каком порядке они будут присваиваться переменной: этот оператор гарантирует только то, что все
        они будут просмотрены.</p>

      <p>Следующий сценарий создает новый объект <tt>ob</tt>, а затем последовательно выводит все его
        свойства на экран обозревателя:</p>

      <div class="code">
<pre class="code">var ob = {&quot;а&quot; : &quot;Архангельск&quot;, &quot;б&quot; : &quot;Баку&quot;, &quot;в&quot; : &quot;Воронеж&quot;};
for (var key in ob)
  document.write(key + &quot;: &quot; + ob[key] + &quot;&lt;BR&gt;&quot;);</pre>
      </div>

      <p>На экране появится текст</p>

      <pre><samp>а: Архангельск
б: Баку
в: Воронеж</samp></pre>

      <h3><a name="ref366">3.6.6. Оператор with</a></h3>

      <p>Оператор <strong>with</strong> задает имя объекта по умолчанию. Он имеет вид:</p>

<pre class="syntax"><strong>with</strong> (<em>выражение</em>) <i>оператор</i></pre>

      <p>Здесь <em>выражение</em>&nbsp;&#151; любое выражение, значением которого является объект, <em>оператор</em>
        &#151; любая группа операторов JavaScript; если эти группа содержит более одного оператора,
        то она должны быть заключена в фигурные скобки <tt>{}</tt>.</p>

      <p>Этот оператор действует следующим образом. Для каждого идентификатора в <em>операторе</em>
        исполняющая система проверяет, не является ли он именем свойства объекта, заданного по умолчанию.
        Если да, то этот идентификатор считается именем свойства, если же нет, то именем переменной.</p>

      <p>Оператор <strong>with</strong> используется для сокращения размера программного кода и ускорения
        доступа к свойствам объектов. Например, для доступа к математическим функциям мы должны каждый
        раз указывать имя объекта <strong>Math</strong>:</p>

      <div class="code">
<pre class="code">x = Math.cos(Math.PI / 2) + Math.sin(Math.LN10);
y = Math.tan(2 * Math.E);</pre>
      </div>

      <p>С помощью оператора <strong>with</strong> этот фрагмент сценария можно существенно укоротить:</p>

      <div class="code">
<prame="ref354">3.5.4. Запоминание найденных подстрок</a></h3>

      <p>Если часть регулярного выражения заключена в круглые скобки, то соответствующая ей подстрока
        будет запомнена для последующего использования. Для доступа к запомненным подстрокам используются
        свойства <a href="js12.htm#psave"> <tt>$1</tt>, &#133;, <tt>$9</tt></a> объекта <strong><a href="js12.htm##ref3123">RegExp</a></strong>
        или элементы массива, возвращаемого методами <strong><a href="js12.htm#mexec">exec</a></strong>
        и <strong><a href="js09.htm#mmatch">match</a></strong>. В последнем случае количество найденных
        и запомненных подстрок не ограничено.</p>

      <p>Например, следующий сценарий использует метод <strong><a href="js09.htm#mreplace">replace</a></strong>
        для перестановки слов в строке. Для замены найденного текста используются свойства <tt>$1</tt>
        и <tt>$2</tt>.</p>

      <div class="code">
<pre class="code">var re = /(\w+)\s(\w+)/;
var str = &quot;Михаил Булгаков&quot;;
document.write(str.replace(re, &quot;$2, $1&quot;))</pre>
      </div>

      <p>Этот сценарий выведет в окно обозревателя текст:</p>

      <p><samp>Булгаков, Михаил</samp></p>

    </td></tr>
  <tr><td><div id="divFooter"></div></td></tr>
</table>
</body>
</html>
 pre class=AF      hr Нo  hr Нo  P‹H4ЎU  P‹H4ЎU     <p class="noindent">где <tt>property</tt>&nbsp;&#151; строковое выражение, значением которого
        является имя свойства, или числовое выражение, задающее номер элемента массива, а <tt>object</tt>&nbsp;&#151;
        любое объектное выражение. Примеры:</p>

      <div class="code">
<pre class="code">mynumber = new Number();	// новый объект
mynumber.high = 100;		// новое свойство объекта
&quot;high&quot; in mynumber		// возвращает true
langs = new Array(&quot;HTML&quot;, &quot;CSS&quot;, &quot;JavaScript&quot;, &quot;Java&quot;);
0 in langs			// возвращает true
4 in langs			// возвращает false</pre>
      </div>

      <h4><a name="ref3475">3.4.7.5. Операция instanceof</a></h4>

      <p><em>Операция instanceof</em> возвращает <strong>true</strong>, если данный объект относится
        к данному классу объектов. Она имеет вид:</p>

<pre class="syntax">object instanceof type</pre>

      <p class="noindent">где <tt>object</tt>&nbsp;&#151; любое объектное выражение, а <tt>type</tt>&nbsp;&#151;
        имя класса объектов. Примеры:</p>

      <div class="code">
<pre class="code">myDay = new Date(1958,5,21);	// новый объект
myDay instanceof Date		// возвращает true</pre>
      </div>

      <h4><a name="ref3476">3.4.7.6. Операция new</a></h4>

      <p><em>Операция new</em> создает новый объект путем вызова конструктора объектов. Она имеет вид:</p>

<pre class="syntax">new type(arguments)</pre>

      <p class="noindent">где <tt>type</tt>&nbsp;&#151; имя конструктора, а <tt>arguments</tt>&nbsp;&#151;
        список параметров, разделенных запятыми, используемых для инициализации объекта. Если список
        параметров пуст, то круглые скобки можно опустить. Примеры:</p>

      <div class="code">
<pre class="code">myObject = new Object;
myArray = new Array();
myDate = new Date(&quot;May 21 1958&quot;);
myDay = new Date(1958,5,21);</pre>
      </div>

      <p>Подробнее о создании новых объектов см. <a href="js07.htm#ref3713">п. 3.7.1.3</a>.</p>

      <h4><a name="ref3477">3.4.7.7. Операция this</a></h4>

      <p><em>Операция this</em> возвращает указатель на текущий объект. Она должна использоваться в
        выражениях вида:</p>

<pre class="syntax">this.property</pre>

      <p class="noindent">где <tt>property</tt>&nbsp;&#151; имя свойства объекта.</p>

      <p>Эта операция широко применяется в <a href="html01.htm#ref1147">обработчиках событий</a> HTML
        для указания на объект, вызвавший данное событие. Например, следующий фрагмент HTML-документа
        содержит поле ввода возраста и сценарий, проверяющий допустимость введенного значения.</p>

      <div class="code">
<pre class="code">&lt;SCRIPT type=&quot;text/javascript&quot;&gt;
function validate(obj, low, high) {
  if ((obj.value &lt; low) || (obj.value &gt; high))
    alert(&quot;Недопустимое значение!&quot;)
}
&lt;/SCRIPT&gt;
&lt;INPUT type=&quot;text&quot; name=&quot;age&quot; size=&quot;3&quot; onchange=&quot;validate(this, 18, 99)&quot;&gt;</pre>
      </div>

      <p>Фактически, <tt>this</tt> указывает либо на <a href="js08.htm#ref381">глобальный объект</a>,
        либо на тот объект, метод которого исполняется в данный момент. Об использовании этой операции
        в конструкторах объектов см. <a href="js07.htm#ref3713">п. 3.7.1.3</a>.</p>

      <h4><a name="ref3478">3.4.7.8. Операция typeof</a></h4>

      <p><em>Операция typeof</em> возвращает строку, содержащую информацию о типе операнда. Она имеет
        вид:</p>

<pre class="syntax">typeof expr или typeof(expr)</pre>

      <p class="noindent">где <tt>expr</tt>&nbsp;&#151; любое выражение. Возвращаемое значение может
        быть одной из шести строк: &quot;number&quot; (число), &quot;string&quot; (строка), &quot;boolean&quot;
        (логическое значение), &quot;object&quot; (объект), &quot;function&quot; (функция) или &quot;undefined&quot;
        (неопределенное значение). Примеры:</p>

      <div class="code">
<pre class="code">var size = 1;
var shape = &quot;круглый&quot;;
var today = new Date();
typeof(size);	// возвращает &quot;number&quot;
typeof shape;	// возвращает &quot;string&quot;
typeof today;	// возвращает &quot;object&quot;</pre>
      </div>

      <p class="note"><strong>Примечание</strong>. В Microsoft JScript операция <tt>typeof</tt> может
        возвращать еще два значения: &quot;date&quot; (тип VT_DATE стандарта COM) и &quot;unknown&quot;
        (COM-интерфейсы ActiveX).</p>

      <h4><a name="ref3479">3.4.7.9. Операция void</a></h4>

      <p><em>Операция void</em> вычисляет значение выражения и возвращает <strong>undefined</strong>.
        Она имеет вид:</p>

<pre class="syntax">void expr или void(expr)</pre>

      <p class="noindent">где <tt>expr</tt>&nbsp;&#151; любое выражение. Эта операция полезна в тех
        случаях, когда мы хотим вычислить значение выражения, но не хотим, чтобы оно передавалось последующей
        части сценария.</p>

      <h3><a name="ref348">3.4.8. Порядок выполнения операций</a></h3>

      <p>При вычислении выражений JavaScript учитывает <em>приоритет операций</em>:
        операции, имеющие больший приоритет, выполняются первыми. Если операции имеют равный приоритет,
        то они выполняются слева направо. Для изменения порядка выполнения операций следует пользоваться
        круглыми скобками: выражение, заключенное в них, имеет наивысший приоритет. В следующей таблице
        приведен список всех операций языка JavaScript в порядке убывания их приоритетов; операции,
        расположенные в одной строке таблицы, имеют равный приоритет.</p>

      <div class="indent">
        <table border="1" cellpadding="5" cellspacing="0" width="60%">
          <caption><a name="table36">Таблица 3.6. Приоритеты операций</a></caption>
          <tr>
            <th>Операция</th>
          </tr>
          <tr>
            <td><tt>. [] ()</tt></td>
          </tr>
          <tr>
            <td><tt>++ -- - ~ ! delete new typeof void</tt></td>
          </tr>
          <tr>
            <td><tt>* / %</tt></td>
          </tr>
          <tr>
            <td><tt>+ -</tt></td>
          </tr>
          <tr>
            <td><tt>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</tt></td>
          </tr>
          <tr>
            <td><tt>&lt; &lt;= &gt; &gt;= instanceof</tt></td>
          </tr>
          <tr>
            <td><tt>== != === !==</tt></td>
          </tr>
          <tr>
            <td><tt>&amp;</tt></td>
          </tr>
          <tr>
            <td><tt>^</tt></td>
          </tr>
          <tr>
            <td><tt>|</tt></td>
          </tr>
          <tr>
            <td><tt>&amp;&amp;</tt></td>
          </tr>
          <tr>
            <td><tt>||</tt></td>
          </tr>
          <tr>
            <td><tt>?:</tt></td>
          </tr>
          <tr>
            <td><tt>= += -= *= /= %= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;= &amp;= ^= |=</tt></td>
          </tr>
          <tr>
            <td><tt>,</tt></td>
          </tr>
        </table>
      </div>

    </td></tr>
  <tr><td><div id="divFooter"></div></td></tr>
</table>
</body>
</html>
 ЎU  б)      8r Нo  8r Нo  °§H4ЎU  °§H4ЎU  name="var"><em>Переменные</em></a> используются в качестве символических имен, принимающих
        различные значения. Имена переменных задаются <a  dd!)      8r Нo  8r Нo  pЁH4ЎU  pЁH4ЎU  том языка, а поддерживается средой исполнения сценариев.</dd>
        <dt><strong>Неопределенное значение</strong></dt>
        <dd>Примитивное значение, которое означает, что переменной не присвоено никакого значения.</dd>
        <dt><strong>Тип Undefined</strong></dt>
        <dd>Этот тип состоит из единственного значения <strong>undefined</strong>, которое является
          неопределенным.</dd>
        <dt><strong>Нулевое значение</strong></dt>
        <dd>Примитивное значение, которое означает нулевую, пустую или несуществующую ссылку.</dd>
        <dt><strong>Тип Null</strong></dt>
        <dd>Этот тип состоит из единственного значения <strong>null</strong>, которое является нулевым.</dd>
        <dt><strong>Логическое значение</strong></dt>
        <dd>Примитивное значение типа <strong>Boolean</strong>, означающее истину или ложь.</dd>
        <dt><strong>Тип Boolean</strong></dt>
        <dd>Тип, состоящий ровно из двух значений: <strong>true</strong> (истина) и <strong>false</strong>
          (ложь).</dd>
        <dt><strong>Логический объект</strong></dt>
        <dd>Элемент типа <strong>Object</strong>, который является экземпляром встроенного логического
          объекта. Иными словами, логический объект создается выражением <code>new Boolean(value)</code>,
          где value&nbsp;&#151; логическое значение. Результирующий объект имеет неявное (безымянное)
          свойство типа <strong>Boolean</strong>.</dd>
        <dt><strong>Строковое значение</strong></dt>
        <dd>Элемент типа <strong>String</strong>. Предсталяет собой строку символов, т .&nbsp;е. упорядоченный
          массив из нуля или более символов Unicode (т.&nbsp;е. 16-битовых целых чисел без знака).</dd>
        <dt><strong>Тип String</strong></dt>
        <dd>Этот тип состоит из всех возможных строковых значений.</dd>
        <dt><strong>Строковый объект</strong></dt>
        <dd>Элемент типа <strong>Object</strong>, который является экземпляром встроенного строкового
          объекта. Иными словами, строковый объект создается выражением <code>new String(value)</code>,
          где value&nbsp;&#151; строковое значение. Результирующий объект имеет неявное (безымянное)
          свойство типа <strong>String</strong>.</dd>
        <dt><strong>Числовое значение</strong></dt>
        <dd>Элемент типа <strong>Number</strong>. Является непосредственным представлением числа.</dd>
        <dt><strong>Тип Number</strong></dt>
        <dd>Тип, состоящий из всех возможных числовых значений. Точнее говоря, это набор 64-битовых
          числовых значений формата IEEE 754, включающий специальные значения <strong>NaN</strong> (не
          число), положительная бесконечность и отрицательная бесконечность.</dd>
        <dt><strong>Числовой объект</strong></dt>
        <dd>Элемент типа <strong>Object</strong>, который является экземпляром встроенного числового
          объекта. Иными словами, числовой объект создается выражением <code>new Number(value)</code>,
          где value&nbsp;&#151; числовое значение. Результирующий объект имеет неявное (безымянное)
          свойство типа <strong>Number</strong>.</dd>
        <dt><str