<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta name="Author" content="Юрий Лукач">
<meta name="Description" content="Справочник Веб-разработчика: современные технологии WWW">
<meta name="Keywords" content="WWW, Веб, разработка, программирование, HTML, DHTML, CSS, Java, JavaScript, CGI, PERL, ASP, XML, XSL, VML, VRML">
<title>WDH: JavaScript - Типы данных</title>
<link rel="Prev" href="js02.htm" title="Основные понятия">
<link rel="Next" href="js04.htm" title="Выражения и операции">
<link rel="Copyright" href="cpyright.htm" title="Сведения об авторских правах">
<link rev="Made" href="mailto:yury@suncloud.ru" title="Обратная связь">
<script type="text/javascript" src="global/load.js"></script>
<script type="text/javascript" src="global/link.js"></script>
</head>

<body onLoad="initDoc(); addBanner(true)">
<table border="0" cellspacing="0" cellpadding="0" width="100%" style="margin: 0">
  <tr><td><div id="divHeader"></div></td></tr>
  <tr><td id="tdBanner" style="text-align: center"><script type="text/javascript">addBanner(false);</script></td></tr>
  <tr><td>

      <h2><a name="ref33">Глава 3.3. Типы данных</a></h2>

      <h3><a name="ref331">3.3.1. Описание типов данных</a></h3>

      <p>Язык JavaScript содержит шесть типов данных: <strong>Undefined</strong> (неопределенный), <strong>Null</strong>
        (нулевой), <strong>Boolean</strong> (логический), <strong>String</strong> (строковый), <strong>Number</strong>
        (числовый) и <strong>Object</strong> (объектный). Это относительно небольшое количество типов
        позволяет, тем не менее, создавать полноценные сценарии для выполнения многих функций.</p>

      <h4><a name="ref3311">3.3.1.1. Тип Undefined (неопределенный)</a></h4>

      <p>Этот тип состоит из единственного значения <strong>undefined</strong>. Это значение, которое
        принимает переменная, которая объявлена в программе, но которой еще не присвоено никакого значения.</p>

      <h4><a name="ref3312">3.3.1.2. Тип Null (нулевой)</a></h4>

      <p>Этот тип состоит из единственного значения <strong>null</strong>. Это значение означает нулевую,
        пустую или несуществующую ссылку.</p>

      <h4><a name="ref3313">3.3.1.3. Тип Boolean (логический)</a></h4>

      <p>Этот тип состоит ровно из двух логических значений: <strong>true</strong> (истина) и <strong>false</strong>
        (ложь).</p>

      <h4><a name="ref3314">3.3.1.4. Тип String (строковый)</a></h4>

      <p>Этот тип состоит из всех возможных текстовых строк. Каждая строка представляет собой упорядоченный
        массив из нуля или более символов Unicode (т.&nbsp;е. 16-битовых целых чисел без знака), называемых
        <em>элементами строки</em>. Элементы строки нумеруются, начиная с нуля. Длина строки&nbsp;&#151;
        это количество элементов в ней; пустая строка состоит из нуля элементов.</p>

      <h4><a name="ref3315">3.3.1.5. Тип Number (числовой)</a></h4>

      <p>Этот тип имеет ровно 18437736874454810627 (т.&nbsp;е. 2<sup>64</sup> - 2<sup>53</sup> + 3)
        значений, соответствующих 64-битовому формату плавающих чисел двойной точности IEEE 754 с тем
        единственным исключением, что 9007199254740990 (т.&nbsp;е. 2<sup>53</sup> - 2) различных значений
        &quot;Не число&quot; данного формата представляются в JavaScript одним значением <strong>NaN</strong>.</p>

      <p>Еще два специальных значения&nbsp;&#151; это положительная бесконечность и отрицательная бесконечность,
        которым в JavaScript соответствуют выражения <strong>+Infinity</strong> (или просто <strong>Inifinity</strong>)
        и <strong>-Infinity</strong>. Отметим также, что в данном формате различаются положительный
        нуль (<strong>+0</strong> или <strong>0</strong>) и отрицательный нуль (<strong>-0</strong>).</p>

      <h4><a name="ref3316">3.3.1.6. Тип Object (объектный)</a></h4>

      <p>Значением этого типа являются <em>объекты</em>. Объект&nbsp;&#151; это неупорядоченный набор
        <em>свойств</em>, который подробно описан в <a href="js07.htm#ref371">разделе 3.7.1</a>.</p>

      <h3><a name="ref332">3.3.2. Преобразование типов</a></h3>

      <p>JavaScript&nbsp;&#151; <em>слаботипизированный язык</em>. Это означает, что в декларации переменной
        мы не указываем ее тип и в дальнейшем можем присваивать ей значения любых типов. Исполняющая
        система JavaScript сама выполняет автоматическое преобразование типов данных по мере необходимости.
        Для явного преобразования типов используются методы <a href="js08.htm#mboolean"><strong>Boolean</strong></a>,
        <a href="js08.htm#mnumber"><strong>Number</strong></a>, <a href="js08.htm#mobject"><strong>Object</strong></a>
        и <a href="js08.htm#mstring"><strong>String</strong></a>.</p>

      <p>Преобразования типов происходят по следующим правилам.</p>

      <h4><a name="ref3321">3.3.2.1. Преобразование к логическому типу</a></h4>

      <div style="margin-left: 3em; margin-top: 1em; margin-bottom: 2em">
        <table border="1" cellpadding="5" cellspacing="0">
          <tr>
            <th>Исходный тип</th>
            <th>Результат</th>
          </tr>
          <tr>
            <td>Undefined</td>
            <td><strong>false</strong></td>
          </tr>
          <tr>
            <td>Null</td>
            <td><strong>false</strong></td>
          </tr>
          <tr>
            <td>Boolean</td>
            <td>без изменений</td>
          </tr>
          <tr>
            <td>Number</td>
            <td><strong>false</strong>, если аргумент равен <strong>+0</strong>, <strong>-0</strong>
              или <strong>NaN</strong>; <strong>true</strong> в остальных случаях</td>
          </tr>
          <tr>
            <td>String</td>
            <td><strong>false</strong>, если аргумент&nbsp;&#151; пустая строка; <strong>true</strong>
              в остальных случаях</td>
          </tr>
          <tr>
            <td>Object</td>
            <td><strong>true</strong></td>
          </tr>
        </table>
      </div>

      <h4><a name="ref3322">3.3.2.2. Преобразование к числовому типу</a></h4>

      <div style="margin-left: 3em; margin-top: 1em; margin-bottom: 2em">
        <table border="1" cellpadding="5" cellspacing="0">
          <tr>
            <th>Исходный тип</th>
            <th>Результат</th>
          </tr>
          <tr>
            <td>Undefined</td>
            <td><strong>NaN</strong></td>
          </tr>
          <tr>
            <td>Null</td>
            <td><strong>+0</strong></td>
          </tr>
          <tr>
            <td>Boolean</td>
            <td><strong>1</strong>, если аргумент равен <strong>true</strong>, и <strong>0</strong>,
              если аргумент равен <strong>false</strong></td>
          </tr>
          <tr>
            <td>Number</td>
            <td>без изменений</td>
          </tr>
          <tr>
            <td>String</td>
            <td>если строка содержит правильное число (возможно с пробелами перед и/или после него),
              то это число; <strong>NaN</strong> в противном случае</td>
          </tr>
          <tr>
            <td>Object</td>
            <td>результат преобразования значения объекта по умолчанию</td>
          </tr>
        </table>
      </div>

      <h4><a name="ref3323">3.3.2.3. Преобразование к строковому типу</a></h4>

      <div style="margin-left: 3em; margin-top: 1em; margin-bottom: 2em">
        <table border="1" cellpadding="5" cellspacing="0">
          <tr>
            <th>Исходный тип</th>
            <th>Результат</th>
          </tr>
          <tr>
            <td>Undefined</td>
            <td><tt>&quot;undefined&quot;</tt></td>
          </tr>
          <tr>
            <td>Null</td>
            <td><tt>&quot;null&quot;</tt></td>
          </tr>
          <tr>
            <td>Boolean</td>
            <td><tt>&quot;true&quot;</tt>, если аргумент равен <strong>true</strong>, и <tt>&quot;false&quot;</tt>,
              если аргумент равен <strong>false</strong></td>
          </tr>
          <tr>
            <td>Number</td>
            <td>текстовое представление числа (см. ниже)</td>
          </tr>
          <tr>
            <td>String</td>
            <td>без изменений</td>
          </tr>
          <tr>
            <td>Object</td>
            <td>результат преобразования значения объекта по умолчанию</td>
          </tr>
        </table>
      </div>

      <p>Преобразование числа <em>n</em> в строку происходит по следующим правилам:</p>

      <ul>
        <li>если <em>n</em> равно <strong>NaN</strong>, то результат <strong>&quot;NaN&quot;</strong>;</li>
        <li>если <em>n</em> равно <strong>+0</strong> или <strong>-0</strong>, то результат <strong>&quot;0&quot;</strong>;</li>
        <li>если <em>n</em> отрицательно, то результат будет конкатенацией строки <strong>&quot;-&quot;</strong>
          и результата преобразования в строку числа <em>-n</em>;</li>
        <li>если <em>n</em> равно бесконечности, то результат <strong>&quot;Infinity&quot;</strong>;</li>
        <li>в остальных случаях пусть <em>m</em>, <em>k</em> и <em>s</em>&nbsp;&#151; такие целые числа,
          что <em>k</em>&nbsp;&gt;=&nbsp;1, 10<sup><em>k</em>-1</sup>&nbsp;&lt;=&nbsp;<em>s</em>&nbsp;&lt;&nbsp;10<sup><em>k</em></sup>,
          <em>n</em> равно <em>s</em>&nbsp;x&nbsp;10<sup><em>m</em>-<em>k</em></sup> и <em>k</em>&nbsp;&#151;
          наименьшее из возможных. Отметим, что <em>k</em>&nbsp;&#151; это количество цифр в десятичном
          представлении <em>s</em>, что <em>s</em> не делится на 10 и что наименее значимая цифра <em>s</em>
          может не быть однозначно определенной. Тогда</li>
        <li>если <em>k</em> &lt;= <em>m</em> &lt;= 21, то результат состоит из <em>k</em> десятичных
          цифр <em>s</em> (без ведущих нулей), за которыми следуют <em>m</em>-<em>k</em> символов <strong>'0'</strong>;</li>
        <li>иначе, если 0 &lt; <em>m</em> &lt;= 21, то результат состоит из <em>m</em> старших десятичных
          цифр <em>s</em>, за которыми следуют десятичная точка <strong>'.'</strong> и <em>k</em>-<em>m</em>
          оставшихся десятичных цифр <em>s</em>;</li>
        <li>иначе, если -6 &lt; <em>m</em> &lt;= 0, то результат состоит из символа <strong>'0'</strong>,
          за которым следуют десятичная точка <strong>'.'</strong>, -<em>m</em> символов <strong>'0'</strong>
          и <em>k</em> десятичных цифр <em>s</em>;</li>
        <li>иначе, если <em>k</em> = 1, то результат состоит из единственной цифры <em>s</em>, символа
          <strong>'e'</strong>, символа плюс <strong>'+'</strong> или минус <strong>'-'</strong> в зависимости
          от того, положительно или отрицательно <em>m</em>-1, за которыми следует десятичное представление
          числа abs(<em>m</em>-1);</li>
        <li>иначе результат состоит из старшей десятичной цифры <em>s</em>, за которой следуют десятичная
          точка <strong>'.'</strong> и <em>k</em>-1 оставшихся десятичных цифр <em>s</em>, символ <strong>'e'</strong>,
          символ плюс <strong>'+'</strong> или минус <strong>'-'</strong> в зависимости от того, положительно
          или отрицательно <em>m</em>-1, за которыми следует десятичное представление числа abs(<em>m</em>-1).</li>
      </ul>

      <h4><a name="ref3324">3.3.2.4. Преобразование к объектному типу</a></h4>

      <div style="margin-left: 3em; margin-top: 1em; margin-bottom: 2em">
        <table border="1" cellpadding="5" cellspacing="0">
          <tr>
            <th>Исходный тип</th>
            <th>Результат</th>
          </tr>
          <tr>
            <td>Undefined</td>
            <td>генерируется исключение <strong><a href="js12.htm#table39">TypeError</a></strong></td>
          </tr>
          <tr>
            <td>Null</td>
            <td>генерируется исключение <strong><a href="js12.htm#table39">TypeError</a></strong></td>
          </tr>
          <tr>
            <td>Boolean</td>
            <td>новый логический объект с данным значением по умолчанию</td>
          </tr>
          <tr>
            <td>Number</td>
            <td>новый числовой объект с данным значением по умолчанию</td>
          </tr>
          <tr>
            <td>String</td>
            <td>новый строковый объект с данным значением по умолчанию</td>
          </tr>
          <tr>
            <td>Object</td>
            <td>без изменений</td>
          </tr>
        </table>
      </div>

      <h4><a name="ref3325">3.3.2.5. Примеры неявных преобразований</a></h4>

      <p>В выражениях, соединяющих числовые и строковые значения операцией +, JavaScript преобразует
        числа в строки, например:</p>

      <div class="code">
<pre class="code">x = &quot;Ответ равен &quot; + 21  // возвращает &quot;Ответ равен 21&quot;
y = 21 + &quot;  - вот ответ&quot; // возвращает &quot;21 - вот ответ&quot;</pre>
      </div>

      <p>В остальных случаях JavaScript пытается преобразовать строку в число, например:</p>

      <div class="code">
<pre class="code">a = &quot;21&quot; - 1 // возвращает 20
b = &quot;21&quot; + 1 // возвращает 211</pre>
      </div>

    </td></tr>
  <tr><td><div id="divFooter"></div></td></tr>
</table>
</body>
</html>
