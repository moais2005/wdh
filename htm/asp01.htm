<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta name="Author" content="Юрий Лукач">
<meta name="Description" content="Справочник Веб-разработчика: современные технологии WWW">
<meta name="Keywords" content="WWW, Веб, разработка, программирование, HTML, DHTML, CSS, Java, JavaScript, CGI, PERL, ASP, XML, XSL, VML, VRML">
<title>WDH: ASP - Введение в ASP</title>
<link rel="Prev" href="perl13.htm" title="CGI-программирование">
<link rel="Next" href="asp02.htm" title="Объектная модель">
<link rel="Copyright" href="cpyright.htm" title="Сведения об авторских правах">
<link rev="Made" href="mailto:yury@suncloud.ru" title="Обратная связь">
<script type="text/javascript" src="global/load.js"></script>
<script type="text/javascript" src="global/link.js"></script>
</head>

<body onLoad="initDoc(); addBanner(true)">
<table border="0" cellspacing="0" cellpadding="0" width="100%" style="margin: 0">
  <tr><td><div id="divHeader"></div></td></tr>
  <tr><td id="tdBanner" style="text-align: center"><script type="text/javascript">addBanner(false);</script></td>
  </tr>
  <tr><td>

      <h1><a name="ref7">Часть VII.<br>Приложения сервера:<br>технологии ASP и JSP</a></h1>

      <p class="epigraph">&quot;Для любой волнующей человека проблемы всегда легко найти решение&nbsp;&#151; простое, достижимое и ошибочное.&quot;</p>

      <p class="epauthor">Генри Менкен</p>

      <h2><a name="ref71">Глава 7.1. Введение в ASP</a></h2>

      <h3><a name="ref711">7.1.1. Понятие активных серверных технологий</a></h3>

      <p>Классическое CGI-программирование, рассмотренное в <a href="perl13.htm">предыдущей главе</a>, имеет один
        существенный недостаток. Он состоит в том, что мы вынуждены каждый раз целиком генерировать весь отправляемый
        клиенту HTML-документ. Из-за этого любая CGI-программа выглядит как длинный список операторов записи в выходной поток
        обычных строк HTML, которые лишь изредка перемежаются собственно программистскими действиями.
        Связано это с тем, что большинство HTML-документов содержат много статической информации, которую приходится
        каждый раз генерировать заново.</p>

      <p>Осознание этого факта привело к изменению постановки задачи по генерации сервером Веб-страниц: вместо программного
        порождения HTML-документа было предложено создавать полуфабрикаты, которые представляют собой обычный
        HTML-файл со вставленными в него директивами специального вида. Веб-сервер перед оправкой страницы клиенту
        просматривает ее и заменяет все директивы на соответствующий HTML-текст. Такая технология получила
        название SSI (Server Side Includes); она по сей день применяется на многих популярных Веб-серверах,
        включая NCSA, Apache и Netscape. Приведем пример типичного HTML-документа, содержащего директивы SSI:</p>

      <div class="code">
<pre class="code">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot;&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Добро пожаловать!&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;Добро пожаловать на мой сервер <strong>&lt;!--#echo var="SERVER_NAME"--&gt;</strong>!&lt;/H1&gt;
&lt;P&gt;Сегодня: <strong>&lt;!--#echo var="DATE_LOCAL"--&gt;</strong>&lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</pre>
      </div>

      <p>Выделенные жирным шрифтом комментарии как раз и являются директивами SSI. Первая директива заменяется
        на имя Веб-сервера, а вторая&nbsp;&#151; на текущую дату и время. Помимо подобных вставок серверных
        переменных SSI позволяет вставлять в страницу заранее заготовленные файлы и запрашивать выполнение
        сервером некоторых типовых действий.</p>

      <p>Идея использования полуфабрикатов, из которых сервер создает Веб-страницы, отправляемые клиенту,
        оказалась настолько удобной, что абсолютное большинство современных серверных технологий основаны
        именно на ней. Главное отличие современных технологий от SSI состоит том, что они позволяют вставлять в
        заготовку будущей страницы не только директивы, но и сценарии на каком-либо языке программирования.
        За неимением устоявшегося и общепринятого термина мы будем называть полуфабрикаты Веб-страниц,
        содержащие директивы и сценарии, <em>активными страницами</em>, а работающие с ними технологии&nbsp;&#151;
        <em>активными серверными технологиями</em> (слово "активный" в данном случае означает, что HTML-страница
        не просто пересылается сервером клиенту, а предварительно перерабатывается им, иногда до полной неузнаваемости).</p>

      <p>Активные серверные технологии тесно связаны с определенным Веб-сервером и определенным сценарным языком программирования.
        Наиболее популярными из них (в алфавитном порядке) являются следующие:</p>
      <ul>
        <li><strong>ASP</strong> (Active Server Pages) корпорации Microsoft.</li>
        <li><strong>ColdFusion</strong> корпорации Allaire.</li>
        <li><strong>JSP</strong> (Java Server Pages) корпорации Sun.</li>
        <li><strong>PHP</strong>, открытый проект фонда Apache Software Foundation.</li>
      </ul>

      <p>Приведем основные характеристики этих технологий.</p>

      <div style="margin-top: 1em; margin-bottom: 1em">
        <table cellspacing="0" cellpadding="5" border="1">
          <caption><a name="table71">Таблица 7.1. Активные серверные технологии</a></caption>
          <tr>
            <th>&nbsp;</th>
            <th>ASP</th>
            <th>ColdFusion</th>
            <th>JSP</th>
            <th>PHP</th>
          </tr>
          <tr>
            <td><strong>Платформа</strong></td>
            <td>Windows</td>
            <td>Unix, Windows</td>
            <td>Unix, Windows, MacOS</td>
            <td>Unix, Windows, MacOS, OS/2</td>
          </tr>
          <tr>
            <td><strong>Веб-сервер</strong></td>
            <td>IIS, PWS</td>
            <td>Apache, IIS, Netscape, WSAPI</td>
            <td>любой</td>
            <td>Apache, IIS, NSAPI, Zeus</td>
          </tr>
          <tr>
            <td><strong>Язык</strong></td>
            <td>VBScript, JavaScript</td>
            <td>CFML</td>
            <td>Java</td>
            <td>PHP</td>
          </tr>
          <tr>
            <td><strong>Компоненты</strong></td>
            <td>COM</td>
            <td>COM, CORBA, JavaBeans</td>
            <td>JavaBeans, Enterprise JavaBeans</td>
            <td>нет</td>
          </tr>
        </table>
      </div>

      <p>В этой части справочника описаны две из этих технологий: ASP и JSP. Такой выбор объясняется только
        личными пристрастиями автора, а не объективным анализом достоинств и недостатков названных
        активных технологий. ASP описана в первых четырех главах этой части, а JSP — начиная с <a href="jsp05.htm">гл. 7.5</a>.</p>

      <h3><a name="ref712">7.1.2. Что такое Active Server Pages?</a></h3>

      <p>Microsoft определяет Active Server Pages (ASP) так: &quot;ASP&nbsp;&#151; это открытая прикладная среда,
        свободная от компиляции, в которой мы можем сочетать HTML, сценарии и повторно-используемые
        серверные ActiveX-компоненты для создания динамичных и мощных бизнес-решений, основанных на Вебе.&quot;
        В переводе с корпоративного языка на русский, ASP&nbsp;&#151; это просто Веб-страницы,
        содержащие серверные сценарии.<p>

      <p>Суть ASP состоит в том, что когда сервер получает от клиента запрос на ASP-файл, он исполняет серверные сценарии,
        включенные в этот файл, и в результате создает Веб-страницу, которая передается клиенту.
        Помимо сценариев сервера, ASP-файлы могут содержать HTML-текст (включая сценарии клиента) и
        обращения к компонентам COM, которые могут выполнять необходимые действия по связи ASP с
        другими службами сервера (например, обеспечивать доступ к базам данных или обрабатывать
        числовые данные). Для того, чтобы отличить ASP-файлы от обычных HTML-страниц, им присваивается расширение .ASP.</p>

      <p>Сценарии ASP могут быть написаны на любом языке, поддерживаемом сервером (например, JavaScript,
        VBScript или PERL). Мы в дальнейшем изложении приводим все примеры на языке JavaScript, поскольку
        он является на сегодня базовым сценарным языком.</p>

      <p>Для выполнения серверных ASP-сценариев требуется Веб-сервер корпорации Microsoft, а именно IIS (Internet Information Services)
        или PWS (Personal Web Server). IIS&nbsp;&#151; это профессиональный Веб-сервер, предназначенный для платформы Windows NT.
        Точнее говоря, он работает только под управлением ОС Windows NT 4.0 Server, Windows 2000 Professional, Windows 2000 Server,
        Windows XP Professional и Windows 2003 Server. Текущей версией является IIS 5.1, который поставляется как часть ОС Windows 2000/XP.
        PWS&nbsp;&#151; это урезанная версия IIS, которая поддерживает большую часть возможностей ASP и предназначена для платформы Windows 9x,
        т.&nbsp;е. Windows 95, Windows 98 и Windows Me. Обычно PWS используется Веб-разработчиками для создания и отладки сайтов на своих клиентских
        компьютерах с тем, чтобы в дальнейшем загрузить эти сайты на сервер, работающий под управлением IIS.</p>

      <h3><a name="ref713">7.1.3. Пример ASP-документа</a></h3>

      <p>Начнем с простейшего примера ASP-страницы:</p>

      <div class="code">
<pre class="code">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot;&gt;
<strong>&lt;%@ LANGUAGE = JScript %&gt;</strong>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Добро пожаловать!&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
<strong>&lt;% Response.Write("&lt;P&gt;Добро пожаловать!&lt;/P&gt;") %&gt;</strong>
&lt;/BODY&gt;
&lt;/HTML&gt;</pre>
      </div>

      <p>В этом примере к ASP имеют отношение только две строки, выделенные полужирным шрифтом.
        Первая строка говорит серверу, что наша страница содержит сценарии на языке JScript; она
        необходима, поскольку по умолчанию принято, что серверные сценарии пишутся на VBScript.
        Вторая строка вставляет в создаваемую Веб-страницу HTML-элемент, заключенный в кавычки.
        В результате обработки Веб-сервером этой страницы в обозреватель клиента будет передан такой
        HTML-документ:</p>

      <div class="code">
<pre class="code">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot;&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Добро пожаловать!&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;P&gt;Добро пожаловать!&lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</pre>
      </div>

      <p>Обратите внимание на то, что все директивы ASP, обращенные к серверу, заключаются в специальные скобки
        <tt>&lt;% &#133; %&gt;</tt>. Приведенную выше ASP-страницу можно было бы написать и немного короче,
        пользуясь удобным сокращением для включения текста в результирующий документ:</p>

      <div class="code">
<pre class="code">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot;&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Добро пожаловать!&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
<strong>&lt;%= "&lt;P&gt;Добро пожаловать!&lt;/P&gt;" %&gt;</strong>
&lt;/BODY&gt;
&lt;/HTML&gt;</pre>
      </div>

      <h3><a name="ref714">7.1.4. Контексты ASP</a></h3>

      <p>Под <em>контекстом</em> мы будем понимать область действия объектов, создаваемых в ASP-страницах.
        Объектная модель ASP предусматривает три возможных контекста:</p>
      <dl>
        <dt>Контекст страницы.</dt>
        <dd>По умолчанию объекты ASP существуют в контексте Веб-страницы. Это означает, что объект, созданный в ASP-странице,
          автоматически удаляется, когда сервер заканчивает обработку этой страницы.</dd>
        <dt>Контекст сессии.</dt>
        <dd>Во многих случаях необходимо хранить информацию о сессии, т.&nbsp;е. о визите конкретного пользователя на наш Веб-узел.
          ASP дает нам такую возможность путем присвоения каждой сессии уникального идентификатора, который сохраняется в куки клиентского
          компьютера (подробнее см. ???). Для управления контекстом сессии используются объект
          <strong><a href="asp02.htm#ref729">Session</a></strong> и файл <a href="#ref715">GLOBAL.ASA</a>.</dd>
        <dt>Контекст приложения.</dt>
        <dd>ASP позволяет оформить совокупность ASP-страниц в виде единого Веб-приложения. Веб-приложение понимается как все ASP-файлы,
          находящиеся в корневой виртуальной папке Веб-узла и ее подпапках. Это понятие позволяет нам создавать объекты
          в контексте приложения, т.&nbsp;е. при запуске приложения создать единственный экземпляр объекта, который будет существовать
          до завершения работы приложения.  Для управления контекстом приложения используются объект
          <strong><a href="asp02.htm#ref723">Application</a></strong> и файл <a href="#ref715">GLOBAL.ASA</a>.</dd>
      </dl>

      <h3><a name="ref715">7.1.5. Файл GLOBAL.ASA</a></h3>

      <p>Для управления контекстами ASP используется специальный файл. Этот файл должен называться
        GLOBAL.ASA и находиться в корневой виртуальной папке Веб-приложения. Приложение не может иметь
        более одного файла GLOBAL.ASA. Приведем общий вид этого файла:</p>

      <div class="code">
<pre class="code">&lt;SCRIPT LANGUAGE=JScript RUNAT=Server&gt;
// Исполняется, когда первый пользователь обратится к Веб-узлу.
function Application_OnStart() {
}
&lt;/SCRIPT&gt;

&lt;SCRIPT LANGUAGE=JScript RUNAT=Server&gt;
// Исполняется при завершении работы Веб-сервера или при изменении файла GLOBAL.ASA.
function Application_OnEnd() {
}
&lt;/SCRIPT&gt;


&lt;SCRIPT LANGUAGE=JScript RUNAT=Server&gt;
// Исполняется в начале новой пользовательской сессии.
function Session_OnStart() {
}
&lt;/SCRIPT&gt;

&lt;SCRIPT LANGUAGE=JScript RUNAT=Server&gt;
// Исполняется при завершении пользовательской сессии.
function Session_OnEnd() {
}
&lt;/SCRIPT&gt;</pre>
      </div>

      <p>Помимо перечисленных обработчиков событий, GLOBAL.ASA может содержать декларации
        COM-объектов и библиотек типов. Областью действия объектов, определенных в GLOBAL.ASA,
        могут быть приложение (<tt>SCOPE=Application</tt>) или сессия (<tt>SCOPE=Session</tt>).
        Обратите внимание, что объявленные здесь объекты создаются только в тот момент, когда
        какой-нибудь из серверных сценариев впервые обратится к такому объекту. Примеры:</p>

      <div class="code">
<pre class="code">&lt;OBJECT RUNAT=Server SCOPE=Session ID=MyConnection 
  CLASSID="Clsid:8AD3067A-B3FC-11CF-A560-00A0C9081C21"&gt;
&lt;/OBJECT&gt;

&lt;OBJECT RUNAT=Server SCOPE=Application ID=MyAd PROGID="MSWC.AdRotator"&gt;
&lt;/OBJECT&gt;</pre>
      </div>

      <p>Мы можем обращаться к подобным объектам из любой ASP-страницы нашего Веб-приложения по его идентификатору, например:</p>

      <div class="code">
<pre class="code">&lt;%= MyAd.GetAdvertisement("ads/advert.txt") %&gt;</pre>
      </div>

      <p>Использование библиотек типов мы здесь не описываем, поскольку эта тема выходит за пределы нашего справочника.</p>

      <h3><a name="ref716">7.1.6. Директивы ASP</a></h3>

      <p>ASP поддерживает пять специальных директив, указывающих Веб-серверу, как именно следует
        обрабатывать ASP-файл. Все директивы заключаются в специальные скобки <tt>&lt;%@ &#133; %&gt;</tt>.
        Внутри этих скобок можно указывать несколько директив, разделяя их пробелами.</p>

      <div class="indent">
        <table cellspacing="0" border="1" cellpadding="5">
          <caption><a name="table72">Таблица 7.2. Директивы ASP</a></caption>
          <tr>
            <td><a href="#codepage">CODEPAGE</a></td>
            <td>Задает кодовую страницу для <a href="charsets.htm">кодировки символов</a>.</td>
          </tr>
          <tr>
            <td><a href="#enablesessionstate">ENABLESESSIONSTATE</a></td>
            <td>Директива управления Веб-сессией.</td>
          </tr>
          <tr>
            <td><a href="#language">LANGUAGE</a></td>
            <td>Задает язык программирования для серверных сценариев.</td>
          </tr>
          <tr>
            <td><a href="#lcid">LCID</a></td>
            <td>Задает национальную настройку даты, времени и денежных единиц.</td>
          </tr>
          <tr>
            <td><a href="#transaction">TRANSACTION</a></td>
            <td>Директива управления транзакциями.</td>
          </tr>
        </table>
      </div>

      <h4><a name="hcodepage">Директива CODEPAGE</a></h4>

<pre class="syntax"><strong><a name="codepage">Синтаксис</a></strong>: &lt;%@ CODEPAGE = <em>codepage</em> %&gt;
<strong>Аргумент</strong>:  <em>codepage</em>&nbsp;&#151; целое число</pre>

      <p>Эта директива задает номер <a href="charsets.htm">кодовой страницы Windows</a>, в которой закодирован текст данной ASP-страницы.
        Например, в начало страницы, созданной в русской кодировке Windows следует включить директиву
        <code>&lt;%@ CODEPAGE=1251 %&gt;</code>, а в начало страницы в кодировке UTF-8&nbsp;&#151; директиву
        <code>&lt;%@ CODEPAGE=65001 %&gt;</code>.</p>

      <h4><a name="henablesessionstate">Директива ENABLESESSIONSTATE</a></h4>

<pre class="syntax"><strong><a name="enablesessionstate">Синтаксис</a></strong>: &lt;%@ ENABLESESSIONSTATE = <em>value</em> %&gt;
<strong>Аргумент</strong>:  <em>value</em>&nbsp;&#151; логическое значение</pre>

      <p>Эта директива позволяет отключить отслеживание пользовательских сессий для данной страницы. В этом случае
        поддержка объектов в контексте сессии становится невозможной, но IIS обрабатывает страницу несколько быстрее.
        Пример: <code>&lt;%@ ENABLESESSIONSTATE=False %&gt;</code>.</p>

      <h4><a name="hlanguage">Директива LANGUAGE</a></h4>

<pre class="syntax"><strong><a name="language">Синтаксис</a></strong>: &lt;%@ LANGUAGE = <em>language</em> %&gt;
<strong>Аргумент</strong>:  <em>language</em>&nbsp;&#151; текстовая строка</pre>

      <p>Эта директива задает название языка программирования, на котором написаны сценарии в данной ASP-странице. По умолчанию
        считается, что сценарии ASP написаны на VBScript. Для указания на язык JavaScript в начало страницы нужно включить директиву
        <code>&lt;%@ LANGUAGE=JScript %&gt;</code>, а для указания на язык PerlScript&nbsp;&#151; директиву
        <code>&lt;%@ LANGUAGE=PerlScript %&gt;</code>.</p>

      <h4><a name="hlcid">Директива LCID</a></h4>

<pre class="syntax"><strong><a name="lcid">Синтаксис</a></strong>: &lt;%@ LCID = <em>lcid</em> %&gt;
<strong>Аргумент</strong>:  <em>lcid</em>&nbsp;&#151; целое число</pre>

      <p>Эта директива задает национальную настройку форматов даты, времени и денежных единиц для данной ASP-страницы.
        В частности, для задания российских настроек в начало страницы нужно включить директиву <code>&lt;%@ LCID=1049 %&gt;</code>.</p>

      <h4><a name="htransaction">Директива TRANSACTION</a></h4>

<pre class="syntax"><strong><a name="transaction">Синтаксис</a></strong>: &lt;%@ TRANSACTION = <em>value</em> %&gt;
<strong>Аргумент</strong>:  <em>value</em>&nbsp;&#151; текстовая строка</pre>

      <p>Эта директива позволяет создавать транзакции, т.&nbsp;е. выполнять несколько сценариев как неделимую последовательность
        операций.</p>

    </td></tr>
  <tr><td><div id="divFooter"></div></td></tr>
</table>
</body>
</html>
