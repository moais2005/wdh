<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta name="Author" content="Юрий Лукач">
<meta name="Description" content="Справочник Веб-разработчика: современные технологии WWW">
<meta name="Keywords" content="WWW, Веб, разработка, программирование, HTML, DHTML, CSS, Java, JavaScript, CGI, PERL, ASP, XML, XSL, VML, VRML">
<title>WDH: Java - Типы, значения и переменные</title>
<link rel="Prev" href="java02.htm" title="Лексические соглашения">
<link rel="Next" href="java04.htm" title="Преобразования типов">
<link rel="Copyright" href="cpyright.htm" title="Сведения об авторских правах">
<link rev="Made" href="mailto:yury@suncloud.ru" title="Обратная связь">
<script type="text/javascript" src="global/load.js"></script>
<script type="text/javascript" src="global/link.js"></script>
</head>

<body onLoad="initDoc(); addBanner(true)">
<table border="0" cellspacing="0" cellpadding="0" width="100%" style="margin: 0">
  <tr><td><div id="divHeader"></div></td></tr>
  <tr><td id="tdBanner" style="text-align: center"><script type="text/javascript">addBanner(false);</script></td></tr>
  <tr><td>

      <h2><a name="ref53">Глава 5.3. Типы, значения и переменные</a></h2>

      <h3><a name="ref531">5.3.1. Основные понятия</a></h3>

      <p>Java&nbsp;&#151; строготипизованный язык. Это означает, что каждая переменная и каждое выражение
        Java должно иметь <em>тип</em>, определенный уже на этапе компиляции. Каждый тип имеет определенный
        диапазон значений и определяет набор применимых к нему операций и их смысл. Строгая типизация
        помогает обнаруживать ошибки в программе на этапе компиляции.</p>

      <p>Все типы в Java подразделяются на <em>примитивные</em> и <em>ссылочные</em>. Примитивными являются
        логический тип <strong>boolean</strong>, целые числовые типы <strong>byte</strong>, <strong>short</strong>,
        <strong>int</strong>, <strong>long</strong>, <strong>char</strong> и плавающие числовые типы
        <strong>float</strong> и <strong>double</strong>. К ссылочным типам относятся <em>классы</em>,
        <em>интерфейсы</em> и <em>массивы</em>. Существует также специальный <em>нулевой тип</em>.</p>

      <p><em>Объект</em> в Java&nbsp;&#151; это или динамически созданный экземпляр класса, или динамический
        созданный массив. Значениями ссылочного типа являются ссылки на объекты. Все объекты, включая
        массивы, наследуют методы класса <tt>Object</tt>. Строки представляются объектами класса <tt>String</tt>.</p>

      <p><em>Переменная</em>&nbsp;&#151; это именованное хранилище данных определенного типа. Точнее
        говоря:</p>

      <ul>
        <li>Переменная примитивного типа всегда содержит значение именно этого типа.</li>
        <li>Переменная типа класс может содержать либо значение <strong>null</strong> (нулевую ссылку),
          либо ссылку на объект данного класса или его наследника.</li>
        <li>Переменная типа интерфейс может содержать либо нулевую ссылку, либо ссылку на объект любого
          класса, реализующий данный интерфейс.</li>
        <li>Переменная типа &quot;<tt>array of T</tt>&quot;, где T&nbsp;&#151; примитивный тип, может
          содержать либо нулевую ссылку, либо ссылку на объект типа &quot<tt>array of T</tt>&quot;.</li>
        <li>Переменная типа &quot;<tt>array of T</tt>&quot;, где T&nbsp;&#151; ссылочный тип, может
          содержать либо нулевую ссылку, либо ссылку на массив, состоящий из данных, совместимых с T
          по присваиванию.</li>
        <li>Переменная типа <tt>Object</tt> может содержать либо нулевую ссылку, либо ссылку на любой
          объект.</li>
      </ul>

      <h3><a name="ref532">5.3.2. Примитивные типы</a></h3>

      <h4><a name="ref5321">5.3.2.1. Тип boolean</a></h4>

      <p>Тип <strong>boolean</strong> состоит из двух логических констант: <strong>true</strong> (истина)
        и <strong>false</strong> (ложь). Логическое значение может быть приведено к типу <strong>boolean</strong>,
        другие неявные приведения к данному типу в Java отсутствуют. Логическое значение может быть
        преобразовано в строку по правилу неявного преобразования строк.</p>

      <p>Пример декларации логической переменной:</p>

      <div class="code">
<pre class="code">boolean b;</pre>
      </div>

      <h4><a name="ref5322">5.3.2.2. Целые числовые типы</a></h4>

      <p>Значения целых числовых типов лежат в следующих диапазонах.</p>

      <ul>
        <li><strong>byte</strong>: от -128 до 127 включительно (8 бит);</li>
        <li><strong>short</strong>: от -32768 до 32767 включительно (16 бит);</li>
        <li><strong>int</strong>: от -2147483648 до 2147483647 включительно (32 бита);</li>
        <li><strong>long</strong>: от -9223372036854775808 до 9223372036854775807 включительно (64 бита)</li>
        <li><strong>char</strong>: от '\u0000' до'\uffff' включительно, т.&nbsp;е. от 0 to 65535 (16 бит без знака).</li>
      </ul>

      <p>Если хотя бы один из операндов имеет тип <strong>long</strong>, то второй операнд также приводится
        к этому типу, и результат операции будет иметь тип <strong>long</strong> (исключением являются
        операции сдвига). В остальных случаях все операнды приводятся к типу <strong>int</strong>, и
        результат операции также имеет тип <strong>int</strong>.</p>

      <p>Любое значение целого типа может быть приведено к любому числовому типу. Неявные приведения
        целых числовых типов к типу <strong>boolean</strong> и наоборот в Java отсутствуют.</p>

      <p>Примеры деклараций целых переменных:</p>

      <div class="code">
<pre class="code">byte b;
short s;
int i;
long l;
char c;</pre>
      </div>

      <h4><a name="ref5323">5.3.2.3. Плавающие числовые типы</a></h4>

      <p>Java содержит два плавающих типа <strong>float</strong> и <strong>double</strong>, которые
        соответствуют 32-битовой и 64-битовой реализациям формата IEEE 754.</p>

      <p>Эти типы содержат следующие специальные значения: &quot;Не число&quot; <strong>Float.NaN</strong>
        и <strong>Double.NaN</strong>, положительная бесконечность <strong>+Infinity</strong> (или просто
        <strong>Inifinity</strong>) и отрицательная бесконечность <strong>-Infinity</strong>. Отметим
        также, что в данном формате различаются положительный нуль (<strong>+0</strong> или <strong>0</strong>)
        и отрицательный нуль (<strong>-0</strong>). Значение <strong>NaN</strong> имеет ту особенность,
        что оно не равно никакому числовому значению, включая самого себя.</p>

      <p>Если хотя бы один из операндов имеет тип <strong>double</strong>, то второй операнд также приводится
        к этому типу, и результат операции будет иметь тип <strong>double</strong>. В остальных случаях
        все операнды приводятся к типу <strong>float</strong>, и результат операции также имеет тип
        <strong>float</strong>.</p>

      <p>Любое значение плавающего типа может быть приведено к любому числовому типу. Неявные приведения
        плавающих числовых типов к типу <strong>boolean</strong> и наоборот в Java отсутствуют.</p>

      <p>Примеры деклараций плавающих переменных:</p>

      <div class="code">
<pre class="code">float f;
double d;</pre>
      </div>

      <h3><a name="ref533">5.3.3. Ссылочные типы</a></h3>

      <p>Как было указано выше, к ссылочным типам относятся классы, интерфейсы и массивы. В следующем
        примере</p>

      <div class="code">
<pre class="code">
class Point { int[] metrics; }
interface Move { void move(int deltax, int deltay); }</pre>
      </div>

      <p class="noindent">объявлены класс <tt>Point</tt>, содержащий массив <tt>metrics</tt>, и интерфейс
        <tt>Move</tt>, содержащий метод <tt>move</tt>.</p>

      <p>Два ссылочных типа считаются одинаковыми, если:</p>

      <ul>
        <li> оба они являются классами или интерфейсами, загружаются одним загрузчиком классов и имеют
          одно и то же полное имя;</li>
        <li>оба они являются массивами, состоящими из элементов одного и того же типа.</li>
      </ul>

      <h4><a name="ref5331">5.3.3.1. Объекты</a></h4>

      <p>Объект &nbsp;&#151; это либо экземпляр класса, либо массив. Значениями ссылочного типа служат
        ссылки на объекты, которые часто называются также <em>указателями</em>. Специальным ссылочным
        значением является нулевая ссылка, которая не указывает ни на какой объект. Способы создания
        экземпляров классов описаны в <a href="java07.htm">гл. 5.7</a>, а массивов&nbsp;&#151; в <a href="java09.htm">гл. 5.9</a>.</p>

      <p>Помните, что на один объект может указывать любое количество ссылок. Если две переменные указывают
        на один объект, то состояние объекта может быть изменено через первую ссылку, а затем прочитано
        через вторую.</p>

      <h4><a name="ref5332">5.3.3.2. Класс Object</a></h4>

      <p>Стандартный класс <tt>Object</tt> является предком всех остальных классов Java, которые наследуют
        его методы. Подробно эти методы описаны в <a href="java14.htm">гл. 5.14</a>.</p>

      <h4><a name="ref5333">5.3.3.3. Класс String</a></h4>

      <p>Экземплярами класса <tt>String</tt> являются текстовые строки, т.&nbsp;е. цепочки символов
        Unicode. Объект класса <tt>String</tt> имеет постоянное (неизменяемое) значение. Строковые константы
        являются ссылками на экземпляры класса <tt>String</tt>.</p>

      <p>Оператор конкатенации строк неявно создает новый объект класса <tt>String</tt>.</p>

      <h3><a name="ref534">5.3.4. Переменные</a></h3>

      <p>Переменная&nbsp;&#151; это хранилище данных определенного типа, обычно имеющее уникальное имя.
        Переменная всегда содержит значение, которое совместимо по присваиванию с ее типом. Значение
        переменной изменяется операцией присваивания или операциями префиксного/постфиксного инкремента/декремента.</p>

      <h4><a name="ref5341">5.3.4.1. Виды переменных</a></h4>

      <p>В Java существуют семь разновидностей переменных:</p>

      <ol>
        <li><em>Переменная класса</em>&nbsp;&#151; это статическое поле данных в декларации класса или
          любое поле данных в декларации интерфейса. Переменная класса создается при загрузке ее класса
          или интерфейса; сразу после создания ей присваивается значение по умолчанию. Переменная класса
          уничтожается, когда ее класс или интерфейс выгружается (после завершения его финализации).</li>
        <li><em>Переменная реализации</em>&nbsp;&#151; это поле данных в декларации класса, которое
          не является статическим. Такая переменная создается и получает значение по умолчанию при создании
          экземпляра данного класса или класса, который является его потомком. Переменная реализации
          уничтожается, когда соответствующий экземпляр класса удаляется процедурой сборки мусора (после
          завершения его финализации).</li>
        <li><em>Элементы массива</em>&nbsp;&#151; это неименованные переменные, которые создаются и
          получают значение по умолчанию при создании массива. Эти переменные уничтожаются, когда массив
          удаляется процедурой сборки мусора.</li>
        <li><em>Параметры конструктора</em>&nbsp;&#151; это имена значений аргументов, передаваемых
          конструктору. Для каждого параметра в декларации конструктора создается новая переменная каждый
          раз, когда вызывается данный конструктор (явно или неявно). Этой переменной присваивается
          фактическое значение аргумента, переданное конструктору при вызове. Переменная уничтожается
          после завершения выполнения тела конструктора.</li>
        <li><em>Параметры метода</em>&nbsp;&#151; это имена значений аргументов, передаваемых методу.
          Для каждого параметра в декларации метода создается новая переменная каждый раз, когда вызывается
          данный метод. Этой переменной присваивается фактическое значение аргумента, переданное методу
          при вызове. Переменная уничтожается после завершения выполнения тела метода.</li>
        <li><em>Параметр обработчика исключений</em>&nbsp;создается всякий раз, когда выполняется часть
          <strong>catch</strong> оператора <strong>try</strong>. Его значением становится объект, ассоциированный
          с возникшим исключением. Переменная уничтожается после завершения выполнения блока <strong>catch</strong>.</li>
        <li><em>Локальные переменные</em>. Каждый раз, когда в ходе выполнения программы управление
          передается новому блоку или оператору <strong>for</strong>, для каждой декларации переменной
          внутри этого блока или оператора создается соответствующая локальная переменная. Если декларация
          содержит начальное значение переменной, то ей присваивается это значение. Локальная переменная
          уничтожается после завершения выполнения блока или оператора, в котором она объявлена.</li>
      </ol>

      <p>Следующий пример содержит декларации нескольких переменных перечисленных разновидностей:</p>

      <div class="code">
<pre class="code">class Point {
  static int numPoints;		// numPoints - переменная класса
  int x, y;			// x и y - переменные реализации
  int[] w = new int[10];	// w - массив целых чисел, w[0] - элемент массива
  int setX(int x) {		// x - параметр метода
    int oldx = this.x;		// oldx - локальная переменная
    this.x = x;
    return oldx;
  }
}</pre>
      </div>

      <h4><a name="ref5342">5.3.4.2. Начальные значения переменных</a></h4>

      <p>Перед тем, как к переменной можно будет обращаться, ей должно быть присвоено значение. При
        этом </p>

      <ul>
        <li>Каждой переменной класса, переменной реализации и каждому элементу массива при создании
          присваивается значение по умолчанию следующим образом:</li>

        <ul>
          <li style="list-style-type: square">переменные типов <strong>byte</strong>, <strong>short</strong>, <strong>int</strong>,
            <strong>long</strong> получают значение 0 соответствующего типа;</li>
          <li style="list-style-type: square">переменные типов <strong>float</strong> и <strong>double</strong> получают значение +0
            соответствующего типа;</li>
          <li style="list-style-type: square">переменные типа <strong>char</strong> получают значение '\u0000';</li>
          <li style="list-style-type: square">переменные типа <strong>boolean</strong> получают значение <strong>false</strong>;</li>
          <li style="list-style-type: square">переменные ссылочных типов получают значение <strong>null</strong>;</li>
        </ul>

        <li>Каждому параметру метода и конструктора присваивается фактическое значение соответствующего
          аргумента, определенное в момент вызова данного метода или конструктора.</li>
        <li>Параметр обработчика исключений инициализируется соответствующим объектом.</li>
        <li>Локальной переменной перед ее использованием должно быть присвоено значение либо инициализацией
          в декларации, либо оператором присваивания.</li>
      </ul>

    </td></tr>
  <tr><td><div id="divFooter"></div></td></tr>
</table>
</body>
</html>
